{
  "openapi": "3.0.3",
  "info": {
    "title": "Raposo Emporio - OpenAPI 3.0",
    "description": "This is Raposo Emporio API. We aim to be an open source stock management software, that someday can scalate and becoma an e-commerce. Raposo Emporio is a real store, owned by my family, and my main goal here is to make a system personilized for it. Attending their needs. ",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "tags": [
    {
      "name": "Raposo Emporio",
      "description": "Your favorite food place",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/user/signUp": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can be done by any user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistered"
                }
              }
            }
          },
          "400": {
            "description": "Error during request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "Logs user into the system",
        "operationId": "loginUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "1234165151axcqwc"
                    },
                    "role":{
                      "type": "string",
                      "example": "USER"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Retrieve data from all user registered on system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "User must be logged in.",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserRegistered"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User needs to be logged!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Retrieves details of a specific user by their ID",
        "description": "User must be logged in and be an ADMIN.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to retrieve.",
            "schema": {
              "type": "integer",
              "example": 2015
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistered"
                }
              }
            }
          },
          "400": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "User must be logged in. All users can edit only their own data.",
        "operationId": "updateUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2015
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistered"
                }
              }
            }
          },
          "400": {
            "description": "Error during request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "User must be logged in. A USER can delete only their own data, ADMIN can delete any user.",
        "operationId": "deleteUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2015
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted"
          },
          "400": {
            "description": "Error during request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRegister": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "john_doe"
          },
          "first_name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "Doe"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "example": "1990-01-01"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "example": "P@ssw0rd!"
          },
          "document": {
            "type": "string",
            "minLength": 11,
            "maxLength": 14,
            "example": "12345678901"
          },
          "phone": {
            "type": "string",
            "minLength": 10,
            "maxLength": 15,
            "example": "1234567890"
          },
          "country": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "UNITED STATES"
          },
          "state": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "nullable": true,
            "example": "CA"
          },
          "city": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "nullable": true,
            "example": "LOS ANGELES"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "USER"
            ],
            "example": "USER"
          }
        },
        "required": [
          "username",
          "first_name",
          "last_name",
          "birth_date",
          "email",
          "password",
          "document",
          "phone",
          "country",
          "role"
        ]
      },
      "UserRegistered": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 2015
          },
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "john_doe"
          },
          "first_name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "Doe"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "example": "1990-01-01"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "document": {
            "type": "string",
            "minLength": 11,
            "maxLength": 14,
            "example": "12345678901"
          },
          "phone": {
            "type": "string",
            "minLength": 10,
            "maxLength": 15,
            "example": "1234567890"
          },
          "country": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "United States"
          },
          "state": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "nullable": true,
            "example": "CA"
          },
          "city": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "nullable": true,
            "example": "Los Angeles"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "USER"
            ],
            "example": "USER"
          }
        },
        "required": [
          "username",
          "first_name",
          "last_name",
          "birth_date",
          "email",
          "document",
          "phone",
          "country",
          "role"
        ]
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "user"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "example": "password"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "john_doe"
          },
          "first_name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "Doe"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "example": "1990-01-01"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "example": "P@ssw0rd!"
          },
          "document": {
            "type": "string",
            "minLength": 11,
            "maxLength": 14,
            "example": "12345678901"
          },
          "phone": {
            "type": "string",
            "minLength": 10,
            "maxLength": 15,
            "example": "1234567890"
          },
          "country": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "United States"
          },
          "state": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "nullable": true,
            "example": "CA"
          },
          "city": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "nullable": true,
            "example": "Los Angeles"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "USER"
            ],
            "example": "USER"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "An error occurred while fetching users."
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}